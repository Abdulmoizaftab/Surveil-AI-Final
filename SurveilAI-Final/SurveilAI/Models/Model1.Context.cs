//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SurveilAI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SurveilAIEntities : DbContext
    {
        public SurveilAIEntities()
            : base("name=SurveilAIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddCamera> AddCameras { get; set; }
        public virtual DbSet<basedata> basedatas { get; set; }
        public virtual DbSet<cashcontitem> cashcontitems { get; set; }
        public virtual DbSet<CashForeCast_Events> CashForeCast_Events { get; set; }
        public virtual DbSet<CASHPHYS_NEW> CASHPHYS_NEW { get; set; }
        public virtual DbSet<cashstock> cashstocks { get; set; }
        public virtual DbSet<component> components { get; set; }
        public virtual DbSet<componentmap> componentmaps { get; set; }
        public virtual DbSet<componentstate> componentstates { get; set; }
        public virtual DbSet<consoleview> consoleviews { get; set; }
        public virtual DbSet<contact> contacts { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<device_> device_ { get; set; }
        public virtual DbSet<devicecalendar> devicecalendars { get; set; }
        public virtual DbSet<DeviceLastImage> DeviceLastImages { get; set; }
        public virtual DbSet<deviceprofile> deviceprofiles { get; set; }
        public virtual DbSet<dmfunction> dmfunctions { get; set; }
        public virtual DbSet<@event> events { get; set; }
        public virtual DbSet<event_old> event_old { get; set; }
        public virtual DbSet<eventbase> eventbases { get; set; }
        public virtual DbSet<eventconversion> eventconversions { get; set; }
        public virtual DbSet<eventload> eventloads { get; set; }
        public virtual DbSet<eventstore> eventstores { get; set; }
        public virtual DbSet<eventstoreload> eventstoreloads { get; set; }
        public virtual DbSet<extuser> extusers { get; set; }
        public virtual DbSet<extuser_> extuser_ { get; set; }
        public virtual DbSet<Hierarchy> Hierarchies { get; set; }
        public virtual DbSet<hierarchy_> hierarchy_ { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<jobresult> jobresults { get; set; }
        public virtual DbSet<jobschedule> jobschedules { get; set; }
        public virtual DbSet<LineChartDevice> LineChartDevices { get; set; }
        public virtual DbSet<mailtemplate> mailtemplates { get; set; }
        public virtual DbSet<message0001> message0001 { get; set; }
        public virtual DbSet<passwordhistory> passwordhistories { get; set; }
        public virtual DbSet<passwordpolicy> passwordpolicies { get; set; }
        public virtual DbSet<performance> performances { get; set; }
        public virtual DbSet<pmaction> pmactions { get; set; }
        public virtual DbSet<pmevent> pmevents { get; set; }
        public virtual DbSet<pmeventstore> pmeventstores { get; set; }
        public virtual DbSet<pmexecution> pmexecutions { get; set; }
        public virtual DbSet<pmresult> pmresults { get; set; }
        public virtual DbSet<pmschedaction> pmschedactions { get; set; }
        public virtual DbSet<pmschedule> pmschedules { get; set; }
        public virtual DbSet<problem> problems { get; set; }
        public virtual DbSet<problemdata> problemdatas { get; set; }
        public virtual DbSet<problemreply> problemreplies { get; set; }
        public virtual DbSet<pvgroup> pvgroups { get; set; }
        public virtual DbSet<pvgroupcondition> pvgroupconditions { get; set; }
        public virtual DbSet<ReportJob> ReportJobs { get; set; }
        public virtual DbSet<ReportJobControl> ReportJobControls { get; set; }
        public virtual DbSet<stb> stbs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Terminal_lastestevent> Terminal_lastestevent { get; set; }
        public virtual DbSet<transport> transports { get; set; }
        public virtual DbSet<trxn_dict> trxn_dict { get; set; }
        public virtual DbSet<TS_eventstore> TS_eventstore { get; set; }
        public virtual DbSet<UserPermission> UserPermissions { get; set; }
        public virtual DbSet<userprofile> userprofiles { get; set; }
        public virtual DbSet<userprofilefunc> userprofilefuncs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<users_> users_ { get; set; }
        public virtual DbSet<UserSecurity> UserSecurities { get; set; }
        public virtual DbSet<usersession> usersessions { get; set; }
        public virtual DbSet<Archive> Archives { get; set; }
        public virtual DbSet<calendar> calendars { get; set; }
        public virtual DbSet<consolv1> consolv1 { get; set; }
        public virtual DbSet<consolv2> consolv2 { get; set; }
        public virtual DbSet<DEVICE_COMP_TEMP> DEVICE_COMP_TEMP { get; set; }
        public virtual DbSet<DEVICE_DOWNTIME_TEMP_temp> DEVICE_DOWNTIME_TEMP_temp { get; set; }
        public virtual DbSet<DEVICE_STATE_TEMP> DEVICE_STATE_TEMP { get; set; }
        public virtual DbSet<devicefail> devicefails { get; set; }
        public virtual DbSet<DuplicateDevice> DuplicateDevices { get; set; }
        public virtual DbSet<EJTransaction> EJTransactions { get; set; }
        public virtual DbSet<Event_ID> Event_ID { get; set; }
        public virtual DbSet<eventstore_Temp> eventstore_Temp { get; set; }
        public virtual DbSet<event_temp> event_temp { get; set; }
        public virtual DbSet<example> examples { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<jobcontrol> jobcontrols { get; set; }
        public virtual DbSet<jobcontrol_Temp> jobcontrol_Temp { get; set; }
        public virtual DbSet<jobcontrolcache> jobcontrolcaches { get; set; }
        public virtual DbSet<lastcomponentevent> lastcomponentevents { get; set; }
        public virtual DbSet<lastevent> lastevents { get; set; }
        public virtual DbSet<LineChart> LineCharts { get; set; }
        public virtual DbSet<LineChart_Average> LineChart_Average { get; set; }
        public virtual DbSet<LineChartTest> LineChartTests { get; set; }
        public virtual DbSet<pvjournal> pvjournals { get; set; }
        public virtual DbSet<ReportJobResult> ReportJobResults { get; set; }
        public virtual DbSet<Sheet1_> Sheet1_ { get; set; }
        public virtual DbSet<state> states { get; set; }
        public virtual DbSet<statsid> statsids { get; set; }
        public virtual DbSet<StatusBar> StatusBars { get; set; }
        public virtual DbSet<testtable> testtables { get; set; }
        public virtual DbSet<V_AlertView> V_AlertView { get; set; }
        public virtual DbSet<v_card_cpture> v_card_cpture { get; set; }
        public virtual DbSet<V_CashView> V_CashView { get; set; }
        public virtual DbSet<V_Current_State> V_Current_State { get; set; }
        public virtual DbSet<V_DeviceConnected> V_DeviceConnected { get; set; }
        public virtual DbSet<V_Downtime> V_Downtime { get; set; }
        public virtual DbSet<V_Downtime_test> V_Downtime_test { get; set; }
        public virtual DbSet<V_ImageTransfer> V_ImageTransfer { get; set; }
        public virtual DbSet<V_LastImage> V_LastImage { get; set; }
        public virtual DbSet<NDVR> NDVRs { get; set; }
    
        [DbFunction("SurveilAIEntities", "STRING_SPLIT")]
        public virtual IQueryable<STRING_SPLIT_Result> STRING_SPLIT(string @string, string separator)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<STRING_SPLIT_Result>("[SurveilAIEntities].[STRING_SPLIT](@string, @separator)", stringParameter, separatorParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ARCHIVING_UTILITY()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ARCHIVING_UTILITY");
        }
    
        public virtual ObjectResult<DELETEDEVICE_Result> DELETEDEVICE(string deviceid)
        {
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DELETEDEVICE_Result>("DELETEDEVICE", deviceidParameter);
        }
    
        public virtual int EjByImageEnd(string devID, string time, ObjectParameter date_Value, ObjectParameter event_ID)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EjByImageEnd", devIDParameter, timeParameter, date_Value, event_ID);
        }
    
        public virtual int EjByImageStart(string devID, string time, ObjectParameter date_Value, ObjectParameter event_ID)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EjByImageStart", devIDParameter, timeParameter, date_Value, event_ID);
        }
    
        public virtual int EjByImageStart1(string devID, string time, ObjectParameter date_Value, ObjectParameter event_No)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EjByImageStart1", devIDParameter, timeParameter, date_Value, event_No);
        }
    
        public virtual int EJSelect(string devID, string time, ObjectParameter date_Value, ObjectParameter event_ID)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EJSelect", devIDParameter, timeParameter, date_Value, event_ID);
        }
    
        public virtual int EJSelect_Old(string devID, string time, ObjectParameter date_Value, ObjectParameter event_ID)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EJSelect_Old", devIDParameter, timeParameter, date_Value, event_ID);
        }
    
        public virtual int FILL_COMP_STATE(string deviceid, Nullable<int> componentid, Nullable<System.DateTime> timestamp, Nullable<int> eventid, Nullable<int> devicecompstate)
        {
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            var componentidParameter = componentid.HasValue ?
                new ObjectParameter("componentid", componentid) :
                new ObjectParameter("componentid", typeof(int));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(System.DateTime));
    
            var eventidParameter = eventid.HasValue ?
                new ObjectParameter("eventid", eventid) :
                new ObjectParameter("eventid", typeof(int));
    
            var devicecompstateParameter = devicecompstate.HasValue ?
                new ObjectParameter("devicecompstate", devicecompstate) :
                new ObjectParameter("devicecompstate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FILL_COMP_STATE", deviceidParameter, componentidParameter, timestampParameter, eventidParameter, devicecompstateParameter);
        }
    
        public virtual int FILL_DEVICE_STATE(string deviceid, Nullable<int> devicestate, Nullable<System.DateTime> timestamp, Nullable<int> eventid)
        {
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            var devicestateParameter = devicestate.HasValue ?
                new ObjectParameter("devicestate", devicestate) :
                new ObjectParameter("devicestate", typeof(int));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(System.DateTime));
    
            var eventidParameter = eventid.HasValue ?
                new ObjectParameter("eventid", eventid) :
                new ObjectParameter("eventid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FILL_DEVICE_STATE", deviceidParameter, devicestateParameter, timestampParameter, eventidParameter);
        }
    
        public virtual int FILL_Problem_Incident(string terminalid, string pmid, Nullable<System.DateTime> eventdate, string eventno, string orgmessage, string currentdatquery, Nullable<int> currentday)
        {
            var terminalidParameter = terminalid != null ?
                new ObjectParameter("terminalid", terminalid) :
                new ObjectParameter("terminalid", typeof(string));
    
            var pmidParameter = pmid != null ?
                new ObjectParameter("pmid", pmid) :
                new ObjectParameter("pmid", typeof(string));
    
            var eventdateParameter = eventdate.HasValue ?
                new ObjectParameter("eventdate", eventdate) :
                new ObjectParameter("eventdate", typeof(System.DateTime));
    
            var eventnoParameter = eventno != null ?
                new ObjectParameter("eventno", eventno) :
                new ObjectParameter("eventno", typeof(string));
    
            var orgmessageParameter = orgmessage != null ?
                new ObjectParameter("Orgmessage", orgmessage) :
                new ObjectParameter("Orgmessage", typeof(string));
    
            var currentdatqueryParameter = currentdatquery != null ?
                new ObjectParameter("currentdatquery", currentdatquery) :
                new ObjectParameter("currentdatquery", typeof(string));
    
            var currentdayParameter = currentday.HasValue ?
                new ObjectParameter("currentday", currentday) :
                new ObjectParameter("currentday", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FILL_Problem_Incident", terminalidParameter, pmidParameter, eventdateParameter, eventnoParameter, orgmessageParameter, currentdatqueryParameter, currentdayParameter);
        }
    
        public virtual ObjectResult<GetATMUpTime_Result> GetATMUpTime(Nullable<int> days, string userId)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetATMUpTime_Result>("GetATMUpTime", daysParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetStockChart_Result> GetStockChart(Nullable<int> days, string userId)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockChart_Result>("GetStockChart", daysParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetUPTimeChart_Result> GetUPTimeChart(Nullable<int> days, string userId)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUPTimeChart_Result>("GetUPTimeChart", daysParameter, userIdParameter);
        }
    
        public virtual int ImageByStan(string devID, string startTime, string endTime, string stan, ObjectParameter cardNo, ObjectParameter tranStart, ObjectParameter tranEnd)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var stanParameter = stan != null ?
                new ObjectParameter("Stan", stan) :
                new ObjectParameter("Stan", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImageByStan", devIDParameter, startTimeParameter, endTimeParameter, stanParameter, cardNo, tranStart, tranEnd);
        }
    
        public virtual ObjectResult<insertDevice_Result> insertDevice(string deviceID, string branchName, string hlevel, string iP, string deviceType, Nullable<System.DateTime> date, string cassete)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var hlevelParameter = hlevel != null ?
                new ObjectParameter("hlevel", hlevel) :
                new ObjectParameter("hlevel", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var casseteParameter = cassete != null ?
                new ObjectParameter("Cassete", cassete) :
                new ObjectParameter("Cassete", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<insertDevice_Result>("insertDevice", deviceIDParameter, branchNameParameter, hlevelParameter, iPParameter, deviceTypeParameter, dateParameter, casseteParameter);
        }
    
        public virtual int InsertLinChartT(Nullable<System.DateTime> datetime)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLinChartT", datetimeParameter);
        }
    
        public virtual int InsertPerormance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPerormance");
        }
    
        public virtual int LineChartUpTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LineChartUpTime");
        }
    
        public virtual int PURGING_Device()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PURGING_Device");
        }
    
        public virtual int PURGING_Device_Comp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PURGING_Device_Comp");
        }
    
        public virtual int PURGING_Device_State()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PURGING_Device_State");
        }
    
        public virtual int PURGING_EVENT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PURGING_EVENT");
        }
    
        public virtual int PURGING_Past_Jobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PURGING_Past_Jobs");
        }
    
        public virtual int PURGING_Performance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PURGING_Performance");
        }
    
        public virtual ObjectResult<SelectedDevice_Result> SelectedDevice(string deviceid)
        {
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectedDevice_Result>("SelectedDevice", deviceidParameter);
        }
    
        public virtual ObjectResult<sp_AlertView_Result> sp_AlertView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AlertView_Result>("sp_AlertView");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_get_no_rows_wsize(string tb_name, Nullable<decimal> size)
        {
            var tb_nameParameter = tb_name != null ?
                new ObjectParameter("tb_name", tb_name) :
                new ObjectParameter("tb_name", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_get_no_rows_wsize", tb_nameParameter, sizeParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_spaceused_Result> sp_spaceused(string objname, string updateusage)
        {
            var objnameParameter = objname != null ?
                new ObjectParameter("objname", objname) :
                new ObjectParameter("objname", typeof(string));
    
            var updateusageParameter = updateusage != null ?
                new ObjectParameter("updateusage", updateusage) :
                new ObjectParameter("updateusage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_spaceused_Result>("sp_spaceused", objnameParameter, updateusageParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Stan_Trxn_EndTime(string devID, string time, ObjectParameter date_Value)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Stan_Trxn_EndTime", devIDParameter, timeParameter, date_Value);
        }
    
        public virtual int Stan_Trxn_StartTime(string devID, string time, ObjectParameter date_Value)
        {
            var devIDParameter = devID != null ?
                new ObjectParameter("DevID", devID) :
                new ObjectParameter("DevID", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Stan_Trxn_StartTime", devIDParameter, timeParameter, date_Value);
        }
    }
}
