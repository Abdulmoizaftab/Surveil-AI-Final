//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SurveilAI.IMSFService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IMSFServiceSoap", Namespace="http://tempuri.org/")]
    public partial class IMSFService : System.Web.Services.Protocols.SoapHttpClientProtocol {

        private System.Threading.SendOrPostCallback SecondAgentPauseServiceOperationCompleted;

        
        private System.Threading.SendOrPostCallback SecondAgentRestartServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SecondAgentStopServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SecondAgentStartServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SecondAgentKillProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback SecondAgentRestartMachineOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesSecondOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessesSecondOperationCompleted;
        
        private System.Threading.SendOrPostCallback SecondAgentServiceControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecutereportOperationCompleted;
        
        private System.Threading.SendOrPostCallback PauseServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestartServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMachineTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateIMSDiagOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateIMSInventOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceManagerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCPUInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLANInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOSInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiskDriveInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPhysicalMemoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHWInventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionPropOperationCompleted;
        
        private System.Threading.SendOrPostCallback KillProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDirFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDirectoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWindowActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestartMachineOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteProgramOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadSecondAgentfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadScreenfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadJournalfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBIOSUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback BIOSInstallDriverOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBIOSPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadIMSDiagfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadIMSInventfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSecondAgentUpdaterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBootSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBootCapabilitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetNextBootFromCDDVDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetNextBootFromCapablitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetNextBootFromSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRSEPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBiosLastStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearBootOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMTVersionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IMSFService() {
            this.Url = "http://10.21.21.210/IMSFManagerA/imsfservice.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SecondAgentPauseServiceCompletedEventHandler SecondAgentPauseServiceCompleted;
        
        /// <remarks/>
        public event SecondAgentRestartServiceCompletedEventHandler SecondAgentRestartServiceCompleted;
        
        /// <remarks/>
        public event SecondAgentStopServiceCompletedEventHandler SecondAgentStopServiceCompleted;
        
        /// <remarks/>
        public event SecondAgentStartServiceCompletedEventHandler SecondAgentStartServiceCompleted;
        
        /// <remarks/>
        public event SecondAgentKillProcessCompletedEventHandler SecondAgentKillProcessCompleted;
        
        /// <remarks/>
        public event SecondAgentRestartMachineCompletedEventHandler SecondAgentRestartMachineCompleted;
        
        /// <remarks/>
        public event GetServicesSecondCompletedEventHandler GetServicesSecondCompleted;
        
        /// <remarks/>
        public event GetProcessesSecondCompletedEventHandler GetProcessesSecondCompleted;
        
        /// <remarks/>
        public event SecondAgentServiceControlCompletedEventHandler SecondAgentServiceControlCompleted;
        
        /// <remarks/>
        public event ExecutereportCompletedEventHandler ExecutereportCompleted;
        
        /// <remarks/>
        public event PauseServiceCompletedEventHandler PauseServiceCompleted;
        
        /// <remarks/>
        public event RestartServiceCompletedEventHandler RestartServiceCompleted;
        
        /// <remarks/>
        public event StopServiceCompletedEventHandler StopServiceCompleted;
        
        /// <remarks/>
        public event SetDateCompletedEventHandler SetDateCompleted;
        
        /// <remarks/>
        public event GetMachineTypeCompletedEventHandler GetMachineTypeCompleted;
        
        /// <remarks/>
        public event CreateIMSDiagCompletedEventHandler CreateIMSDiagCompleted;
        
        /// <remarks/>
        public event CreateIMSInventCompletedEventHandler CreateIMSInventCompleted;
        
        /// <remarks/>
        public event SetTimeCompletedEventHandler SetTimeCompleted;
        
        /// <remarks/>
        public event StartServiceCompletedEventHandler StartServiceCompleted;
        
        /// <remarks/>
        public event GetDeviceManagerInfoCompletedEventHandler GetDeviceManagerInfoCompleted;
        
        /// <remarks/>
        public event GetCPUInfoCompletedEventHandler GetCPUInfoCompleted;
        
        /// <remarks/>
        public event GetLANInfoCompletedEventHandler GetLANInfoCompleted;
        
        /// <remarks/>
        public event GetOSInfoCompletedEventHandler GetOSInfoCompleted;
        
        /// <remarks/>
        public event GetDiskDriveInfoCompletedEventHandler GetDiskDriveInfoCompleted;
        
        /// <remarks/>
        public event GetPhysicalMemoryCompletedEventHandler GetPhysicalMemoryCompleted;
        
        /// <remarks/>
        public event GetCheckConnectionCompletedEventHandler GetCheckConnectionCompleted;
        
        /// <remarks/>
        public event GetHWInventCompletedEventHandler GetHWInventCompleted;
        
        /// <remarks/>
        public event GetVersionPropCompletedEventHandler GetVersionPropCompleted;
        
        /// <remarks/>
        public event KillProcessCompletedEventHandler KillProcessCompleted;
        
        /// <remarks/>
        public event GetDirFilesCompletedEventHandler GetDirFilesCompleted;
        
        /// <remarks/>
        public event StartProcessCompletedEventHandler StartProcessCompleted;
        
        /// <remarks/>
        public event GetDirectoriesCompletedEventHandler GetDirectoriesCompleted;
        
        /// <remarks/>
        public event GetServicesCompletedEventHandler GetServicesCompleted;
        
        /// <remarks/>
        public event GetProcessesCompletedEventHandler GetProcessesCompleted;
        
        /// <remarks/>
        public event GetDateTimeCompletedEventHandler GetDateTimeCompleted;
        
        /// <remarks/>
        public event SetWindowActivationCompletedEventHandler SetWindowActivationCompleted;
        
        /// <remarks/>
        public event RestartMachineCompletedEventHandler RestartMachineCompleted;
        
        /// <remarks/>
        public event ExecuteProgramCompletedEventHandler ExecuteProgramCompleted;
        
        /// <remarks/>
        public event DownloadfileCompletedEventHandler DownloadfileCompleted;
        
        /// <remarks/>
        public event DownloadSecondAgentfileCompletedEventHandler DownloadSecondAgentfileCompleted;
        
        /// <remarks/>
        public event DownloadScreenfileCompletedEventHandler DownloadScreenfileCompleted;
        
        /// <remarks/>
        public event DownloadJournalfileCompletedEventHandler DownloadJournalfileCompleted;
        
        /// <remarks/>
        public event GetSystemInfoCompletedEventHandler GetSystemInfoCompleted;
        
        /// <remarks/>
        public event SetBIOSUpdateCompletedEventHandler SetBIOSUpdateCompleted;
        
        /// <remarks/>
        public event BIOSInstallDriverCompletedEventHandler BIOSInstallDriverCompleted;
        
        /// <remarks/>
        public event SetBIOSPasswordCompletedEventHandler SetBIOSPasswordCompleted;
        
        /// <remarks/>
        public event DownloadIMSDiagfileCompletedEventHandler DownloadIMSDiagfileCompleted;
        
        /// <remarks/>
        public event DownloadIMSInventfileCompletedEventHandler DownloadIMSInventfileCompleted;
        
        /// <remarks/>
        public event UploadfileCompletedEventHandler UploadfileCompleted;
        
        /// <remarks/>
        public event UploadSecondAgentUpdaterCompletedEventHandler UploadSecondAgentUpdaterCompleted;
        
        /// <remarks/>
        public event GetBootSettingsCompletedEventHandler GetBootSettingsCompleted;
        
        /// <remarks/>
        public event GetBootCapabilitiesCompletedEventHandler GetBootCapabilitiesCompleted;
        
        /// <remarks/>
        public event SetNextBootFromCDDVDCompletedEventHandler SetNextBootFromCDDVDCompleted;
        
        /// <remarks/>
        public event SetNextBootFromCapablitiesCompletedEventHandler SetNextBootFromCapablitiesCompleted;
        
        /// <remarks/>
        public event SetNextBootFromSourceCompletedEventHandler SetNextBootFromSourceCompleted;
        
        /// <remarks/>
        public event SetRSEPasswordCompletedEventHandler SetRSEPasswordCompleted;
        
        /// <remarks/>
        public event GetBiosLastStatusCompletedEventHandler GetBiosLastStatusCompleted;
        
        /// <remarks/>
        public event ClearBootOptionsCompletedEventHandler ClearBootOptionsCompleted;
        
        /// <remarks/>
        public event GetAMTVersionCompletedEventHandler GetAMTVersionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SecondAgentPauseService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecondAgentPauseService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("SecondAgentPauseService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecondAgentPauseServiceAsync(string deviceid, string name, int commandno) {
            this.SecondAgentPauseServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void SecondAgentPauseServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.SecondAgentPauseServiceOperationCompleted == null)) {
                this.SecondAgentPauseServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecondAgentPauseServiceOperationCompleted);
            }
            this.InvokeAsync("SecondAgentPauseService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.SecondAgentPauseServiceOperationCompleted, userState);
        }
        
        private void OnSecondAgentPauseServiceOperationCompleted(object arg) {
            if ((this.SecondAgentPauseServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecondAgentPauseServiceCompleted(this, new SecondAgentPauseServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SecondAgentRestartService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecondAgentRestartService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("SecondAgentRestartService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecondAgentRestartServiceAsync(string deviceid, string name, int commandno) {
            this.SecondAgentRestartServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void SecondAgentRestartServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.SecondAgentRestartServiceOperationCompleted == null)) {
                this.SecondAgentRestartServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecondAgentRestartServiceOperationCompleted);
            }
            this.InvokeAsync("SecondAgentRestartService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.SecondAgentRestartServiceOperationCompleted, userState);
        }
        
        private void OnSecondAgentRestartServiceOperationCompleted(object arg) {
            if ((this.SecondAgentRestartServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecondAgentRestartServiceCompleted(this, new SecondAgentRestartServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SecondAgentStopService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecondAgentStopService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("SecondAgentStopService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecondAgentStopServiceAsync(string deviceid, string name, int commandno) {
            this.SecondAgentStopServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void SecondAgentStopServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.SecondAgentStopServiceOperationCompleted == null)) {
                this.SecondAgentStopServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecondAgentStopServiceOperationCompleted);
            }
            this.InvokeAsync("SecondAgentStopService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.SecondAgentStopServiceOperationCompleted, userState);
        }
        
        private void OnSecondAgentStopServiceOperationCompleted(object arg) {
            if ((this.SecondAgentStopServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecondAgentStopServiceCompleted(this, new SecondAgentStopServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SecondAgentStartService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecondAgentStartService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("SecondAgentStartService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecondAgentStartServiceAsync(string deviceid, string name, int commandno) {
            this.SecondAgentStartServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void SecondAgentStartServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.SecondAgentStartServiceOperationCompleted == null)) {
                this.SecondAgentStartServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecondAgentStartServiceOperationCompleted);
            }
            this.InvokeAsync("SecondAgentStartService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.SecondAgentStartServiceOperationCompleted, userState);
        }
        
        private void OnSecondAgentStartServiceOperationCompleted(object arg) {
            if ((this.SecondAgentStartServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecondAgentStartServiceCompleted(this, new SecondAgentStartServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SecondAgentKillProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecondAgentKillProcess(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("SecondAgentKillProcess", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecondAgentKillProcessAsync(string deviceid, string name, int commandno) {
            this.SecondAgentKillProcessAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void SecondAgentKillProcessAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.SecondAgentKillProcessOperationCompleted == null)) {
                this.SecondAgentKillProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecondAgentKillProcessOperationCompleted);
            }
            this.InvokeAsync("SecondAgentKillProcess", new object[] {
                        deviceid,
                        name,
                        commandno}, this.SecondAgentKillProcessOperationCompleted, userState);
        }
        
        private void OnSecondAgentKillProcessOperationCompleted(object arg) {
            if ((this.SecondAgentKillProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecondAgentKillProcessCompleted(this, new SecondAgentKillProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SecondAgentRestartMachine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecondAgentRestartMachine(string deviceid, int commandno, int timeout) {
            object[] results = this.Invoke("SecondAgentRestartMachine", new object[] {
                        deviceid,
                        commandno,
                        timeout});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecondAgentRestartMachineAsync(string deviceid, int commandno, int timeout) {
            this.SecondAgentRestartMachineAsync(deviceid, commandno, timeout, null);
        }
        
        /// <remarks/>
        public void SecondAgentRestartMachineAsync(string deviceid, int commandno, int timeout, object userState) {
            if ((this.SecondAgentRestartMachineOperationCompleted == null)) {
                this.SecondAgentRestartMachineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecondAgentRestartMachineOperationCompleted);
            }
            this.InvokeAsync("SecondAgentRestartMachine", new object[] {
                        deviceid,
                        commandno,
                        timeout}, this.SecondAgentRestartMachineOperationCompleted, userState);
        }
        
        private void OnSecondAgentRestartMachineOperationCompleted(object arg) {
            if ((this.SecondAgentRestartMachineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecondAgentRestartMachineCompleted(this, new SecondAgentRestartMachineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServicesSecond", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServicesSecond(string deviceid, int commandno) {
            object[] results = this.Invoke("GetServicesSecond", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesSecondAsync(string deviceid, int commandno) {
            this.GetServicesSecondAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetServicesSecondAsync(string deviceid, int commandno, object userState) {
            if ((this.GetServicesSecondOperationCompleted == null)) {
                this.GetServicesSecondOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesSecondOperationCompleted);
            }
            this.InvokeAsync("GetServicesSecond", new object[] {
                        deviceid,
                        commandno}, this.GetServicesSecondOperationCompleted, userState);
        }
        
        private void OnGetServicesSecondOperationCompleted(object arg) {
            if ((this.GetServicesSecondCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesSecondCompleted(this, new GetServicesSecondCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProcessesSecond", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcessesSecond(string deviceid, int commandno) {
            object[] results = this.Invoke("GetProcessesSecond", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessesSecondAsync(string deviceid, int commandno) {
            this.GetProcessesSecondAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetProcessesSecondAsync(string deviceid, int commandno, object userState) {
            if ((this.GetProcessesSecondOperationCompleted == null)) {
                this.GetProcessesSecondOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessesSecondOperationCompleted);
            }
            this.InvokeAsync("GetProcessesSecond", new object[] {
                        deviceid,
                        commandno}, this.GetProcessesSecondOperationCompleted, userState);
        }
        
        private void OnGetProcessesSecondOperationCompleted(object arg) {
            if ((this.GetProcessesSecondCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessesSecondCompleted(this, new GetProcessesSecondCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SecondAgentServiceControl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecondAgentServiceControl(string deviceid, string ServiceStatus, int commandno) {
            object[] results = this.Invoke("SecondAgentServiceControl", new object[] {
                        deviceid,
                        ServiceStatus,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecondAgentServiceControlAsync(string deviceid, string ServiceStatus, int commandno) {
            this.SecondAgentServiceControlAsync(deviceid, ServiceStatus, commandno, null);
        }
        
        /// <remarks/>
        public void SecondAgentServiceControlAsync(string deviceid, string ServiceStatus, int commandno, object userState) {
            if ((this.SecondAgentServiceControlOperationCompleted == null)) {
                this.SecondAgentServiceControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecondAgentServiceControlOperationCompleted);
            }
            this.InvokeAsync("SecondAgentServiceControl", new object[] {
                        deviceid,
                        ServiceStatus,
                        commandno}, this.SecondAgentServiceControlOperationCompleted, userState);
        }
        
        private void OnSecondAgentServiceControlOperationCompleted(object arg) {
            if ((this.SecondAgentServiceControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecondAgentServiceControlCompleted(this, new SecondAgentServiceControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Executereport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Executereport(
                    string userid, 
                    int commandno, 
                    string ReportName, 
                    string deviceid, 
                    string startdate, 
                    string enddate, 
                    string elementid, 
                    string loginid, 
                    string categoryid, 
                    string timenotransaction, 
                    string approvedstatus, 
                    string businessgroup, 
                    string circularoffice, 
                    string region, 
                    string businessarea, 
                    string site, 
                    string timing, 
                    string city, 
                    string manufacturer, 
                    string tier, 
                    string jobid, 
                    string exportas) {
            object[] results = this.Invoke("Executereport", new object[] {
                        userid,
                        commandno,
                        ReportName,
                        deviceid,
                        startdate,
                        enddate,
                        elementid,
                        loginid,
                        categoryid,
                        timenotransaction,
                        approvedstatus,
                        businessgroup,
                        circularoffice,
                        region,
                        businessarea,
                        site,
                        timing,
                        city,
                        manufacturer,
                        tier,
                        jobid,
                        exportas});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecutereportAsync(
                    string userid, 
                    int commandno, 
                    string ReportName, 
                    string deviceid, 
                    string startdate, 
                    string enddate, 
                    string elementid, 
                    string loginid, 
                    string categoryid, 
                    string timenotransaction, 
                    string approvedstatus, 
                    string businessgroup, 
                    string circularoffice, 
                    string region, 
                    string businessarea, 
                    string site, 
                    string timing, 
                    string city, 
                    string manufacturer, 
                    string tier, 
                    string jobid, 
                    string exportas) {
            this.ExecutereportAsync(userid, commandno, ReportName, deviceid, startdate, enddate, elementid, loginid, categoryid, timenotransaction, approvedstatus, businessgroup, circularoffice, region, businessarea, site, timing, city, manufacturer, tier, jobid, exportas, null);
        }
        
        /// <remarks/>
        public void ExecutereportAsync(
                    string userid, 
                    int commandno, 
                    string ReportName, 
                    string deviceid, 
                    string startdate, 
                    string enddate, 
                    string elementid, 
                    string loginid, 
                    string categoryid, 
                    string timenotransaction, 
                    string approvedstatus, 
                    string businessgroup, 
                    string circularoffice, 
                    string region, 
                    string businessarea, 
                    string site, 
                    string timing, 
                    string city, 
                    string manufacturer, 
                    string tier, 
                    string jobid, 
                    string exportas, 
                    object userState) {
            if ((this.ExecutereportOperationCompleted == null)) {
                this.ExecutereportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecutereportOperationCompleted);
            }
            this.InvokeAsync("Executereport", new object[] {
                        userid,
                        commandno,
                        ReportName,
                        deviceid,
                        startdate,
                        enddate,
                        elementid,
                        loginid,
                        categoryid,
                        timenotransaction,
                        approvedstatus,
                        businessgroup,
                        circularoffice,
                        region,
                        businessarea,
                        site,
                        timing,
                        city,
                        manufacturer,
                        tier,
                        jobid,
                        exportas}, this.ExecutereportOperationCompleted, userState);
        }
        
        private void OnExecutereportOperationCompleted(object arg) {
            if ((this.ExecutereportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecutereportCompleted(this, new ExecutereportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PauseService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PauseService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("PauseService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PauseServiceAsync(string deviceid, string name, int commandno) {
            this.PauseServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void PauseServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.PauseServiceOperationCompleted == null)) {
                this.PauseServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPauseServiceOperationCompleted);
            }
            this.InvokeAsync("PauseService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.PauseServiceOperationCompleted, userState);
        }
        
        private void OnPauseServiceOperationCompleted(object arg) {
            if ((this.PauseServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PauseServiceCompleted(this, new PauseServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RestartService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RestartService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("RestartService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RestartServiceAsync(string deviceid, string name, int commandno) {
            this.RestartServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void RestartServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.RestartServiceOperationCompleted == null)) {
                this.RestartServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestartServiceOperationCompleted);
            }
            this.InvokeAsync("RestartService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.RestartServiceOperationCompleted, userState);
        }
        
        private void OnRestartServiceOperationCompleted(object arg) {
            if ((this.RestartServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestartServiceCompleted(this, new RestartServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StopService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("StopService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StopServiceAsync(string deviceid, string name, int commandno) {
            this.StopServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void StopServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.StopServiceOperationCompleted == null)) {
                this.StopServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopServiceOperationCompleted);
            }
            this.InvokeAsync("StopService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.StopServiceOperationCompleted, userState);
        }
        
        private void OnStopServiceOperationCompleted(object arg) {
            if ((this.StopServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopServiceCompleted(this, new StopServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetDate(string deviceid, string datetime, int commandno) {
            object[] results = this.Invoke("SetDate", new object[] {
                        deviceid,
                        datetime,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetDateAsync(string deviceid, string datetime, int commandno) {
            this.SetDateAsync(deviceid, datetime, commandno, null);
        }
        
        /// <remarks/>
        public void SetDateAsync(string deviceid, string datetime, int commandno, object userState) {
            if ((this.SetDateOperationCompleted == null)) {
                this.SetDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDateOperationCompleted);
            }
            this.InvokeAsync("SetDate", new object[] {
                        deviceid,
                        datetime,
                        commandno}, this.SetDateOperationCompleted, userState);
        }
        
        private void OnSetDateOperationCompleted(object arg) {
            if ((this.SetDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDateCompleted(this, new SetDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMachineType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMachineType(string deviceid, int commandno) {
            object[] results = this.Invoke("GetMachineType", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMachineTypeAsync(string deviceid, int commandno) {
            this.GetMachineTypeAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetMachineTypeAsync(string deviceid, int commandno, object userState) {
            if ((this.GetMachineTypeOperationCompleted == null)) {
                this.GetMachineTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMachineTypeOperationCompleted);
            }
            this.InvokeAsync("GetMachineType", new object[] {
                        deviceid,
                        commandno}, this.GetMachineTypeOperationCompleted, userState);
        }
        
        private void OnGetMachineTypeOperationCompleted(object arg) {
            if ((this.GetMachineTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMachineTypeCompleted(this, new GetMachineTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateIMSDiag", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateIMSDiag(string deviceid, int commandno) {
            object[] results = this.Invoke("CreateIMSDiag", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIMSDiagAsync(string deviceid, int commandno) {
            this.CreateIMSDiagAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void CreateIMSDiagAsync(string deviceid, int commandno, object userState) {
            if ((this.CreateIMSDiagOperationCompleted == null)) {
                this.CreateIMSDiagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIMSDiagOperationCompleted);
            }
            this.InvokeAsync("CreateIMSDiag", new object[] {
                        deviceid,
                        commandno}, this.CreateIMSDiagOperationCompleted, userState);
        }
        
        private void OnCreateIMSDiagOperationCompleted(object arg) {
            if ((this.CreateIMSDiagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIMSDiagCompleted(this, new CreateIMSDiagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateIMSInvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateIMSInvent(string deviceid, int commandno) {
            object[] results = this.Invoke("CreateIMSInvent", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIMSInventAsync(string deviceid, int commandno) {
            this.CreateIMSInventAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void CreateIMSInventAsync(string deviceid, int commandno, object userState) {
            if ((this.CreateIMSInventOperationCompleted == null)) {
                this.CreateIMSInventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIMSInventOperationCompleted);
            }
            this.InvokeAsync("CreateIMSInvent", new object[] {
                        deviceid,
                        commandno}, this.CreateIMSInventOperationCompleted, userState);
        }
        
        private void OnCreateIMSInventOperationCompleted(object arg) {
            if ((this.CreateIMSInventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIMSInventCompleted(this, new CreateIMSInventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetTime(string deviceid, string dateTime, int commandno) {
            object[] results = this.Invoke("SetTime", new object[] {
                        deviceid,
                        dateTime,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetTimeAsync(string deviceid, string dateTime, int commandno) {
            this.SetTimeAsync(deviceid, dateTime, commandno, null);
        }
        
        /// <remarks/>
        public void SetTimeAsync(string deviceid, string dateTime, int commandno, object userState) {
            if ((this.SetTimeOperationCompleted == null)) {
                this.SetTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTimeOperationCompleted);
            }
            this.InvokeAsync("SetTime", new object[] {
                        deviceid,
                        dateTime,
                        commandno}, this.SetTimeOperationCompleted, userState);
        }
        
        private void OnSetTimeOperationCompleted(object arg) {
            if ((this.SetTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTimeCompleted(this, new SetTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartService(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("StartService", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartServiceAsync(string deviceid, string name, int commandno) {
            this.StartServiceAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void StartServiceAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.StartServiceOperationCompleted == null)) {
                this.StartServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartServiceOperationCompleted);
            }
            this.InvokeAsync("StartService", new object[] {
                        deviceid,
                        name,
                        commandno}, this.StartServiceOperationCompleted, userState);
        }
        
        private void OnStartServiceOperationCompleted(object arg) {
            if ((this.StartServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartServiceCompleted(this, new StartServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeviceManagerInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDeviceManagerInfo(string deviceid, int commandno) {
            object[] results = this.Invoke("GetDeviceManagerInfo", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceManagerInfoAsync(string deviceid, int commandno) {
            this.GetDeviceManagerInfoAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetDeviceManagerInfoAsync(string deviceid, int commandno, object userState) {
            if ((this.GetDeviceManagerInfoOperationCompleted == null)) {
                this.GetDeviceManagerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceManagerInfoOperationCompleted);
            }
            this.InvokeAsync("GetDeviceManagerInfo", new object[] {
                        deviceid,
                        commandno}, this.GetDeviceManagerInfoOperationCompleted, userState);
        }
        
        private void OnGetDeviceManagerInfoOperationCompleted(object arg) {
            if ((this.GetDeviceManagerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceManagerInfoCompleted(this, new GetDeviceManagerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCPUInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCPUInfo(string deviceid, int commandno) {
            object[] results = this.Invoke("GetCPUInfo", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCPUInfoAsync(string deviceid, int commandno) {
            this.GetCPUInfoAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetCPUInfoAsync(string deviceid, int commandno, object userState) {
            if ((this.GetCPUInfoOperationCompleted == null)) {
                this.GetCPUInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCPUInfoOperationCompleted);
            }
            this.InvokeAsync("GetCPUInfo", new object[] {
                        deviceid,
                        commandno}, this.GetCPUInfoOperationCompleted, userState);
        }
        
        private void OnGetCPUInfoOperationCompleted(object arg) {
            if ((this.GetCPUInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCPUInfoCompleted(this, new GetCPUInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLANInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLANInfo(string deviceid, int commandno) {
            object[] results = this.Invoke("GetLANInfo", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLANInfoAsync(string deviceid, int commandno) {
            this.GetLANInfoAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetLANInfoAsync(string deviceid, int commandno, object userState) {
            if ((this.GetLANInfoOperationCompleted == null)) {
                this.GetLANInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLANInfoOperationCompleted);
            }
            this.InvokeAsync("GetLANInfo", new object[] {
                        deviceid,
                        commandno}, this.GetLANInfoOperationCompleted, userState);
        }
        
        private void OnGetLANInfoOperationCompleted(object arg) {
            if ((this.GetLANInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLANInfoCompleted(this, new GetLANInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOSInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOSInfo(string deviceid, int commandno) {
            object[] results = this.Invoke("GetOSInfo", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOSInfoAsync(string deviceid, int commandno) {
            this.GetOSInfoAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetOSInfoAsync(string deviceid, int commandno, object userState) {
            if ((this.GetOSInfoOperationCompleted == null)) {
                this.GetOSInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOSInfoOperationCompleted);
            }
            this.InvokeAsync("GetOSInfo", new object[] {
                        deviceid,
                        commandno}, this.GetOSInfoOperationCompleted, userState);
        }
        
        private void OnGetOSInfoOperationCompleted(object arg) {
            if ((this.GetOSInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOSInfoCompleted(this, new GetOSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDiskDriveInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDiskDriveInfo(string deviceid, int commandno) {
            object[] results = this.Invoke("GetDiskDriveInfo", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiskDriveInfoAsync(string deviceid, int commandno) {
            this.GetDiskDriveInfoAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetDiskDriveInfoAsync(string deviceid, int commandno, object userState) {
            if ((this.GetDiskDriveInfoOperationCompleted == null)) {
                this.GetDiskDriveInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiskDriveInfoOperationCompleted);
            }
            this.InvokeAsync("GetDiskDriveInfo", new object[] {
                        deviceid,
                        commandno}, this.GetDiskDriveInfoOperationCompleted, userState);
        }
        
        private void OnGetDiskDriveInfoOperationCompleted(object arg) {
            if ((this.GetDiskDriveInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiskDriveInfoCompleted(this, new GetDiskDriveInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPhysicalMemory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPhysicalMemory(string deviceid, int commandno) {
            object[] results = this.Invoke("GetPhysicalMemory", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPhysicalMemoryAsync(string deviceid, int commandno) {
            this.GetPhysicalMemoryAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetPhysicalMemoryAsync(string deviceid, int commandno, object userState) {
            if ((this.GetPhysicalMemoryOperationCompleted == null)) {
                this.GetPhysicalMemoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPhysicalMemoryOperationCompleted);
            }
            this.InvokeAsync("GetPhysicalMemory", new object[] {
                        deviceid,
                        commandno}, this.GetPhysicalMemoryOperationCompleted, userState);
        }
        
        private void OnGetPhysicalMemoryOperationCompleted(object arg) {
            if ((this.GetPhysicalMemoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPhysicalMemoryCompleted(this, new GetPhysicalMemoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCheckConnection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCheckConnection(string deviceid) {
            object[] results = this.Invoke("GetCheckConnection", new object[] {
                        deviceid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckConnectionAsync(string deviceid) {
            this.GetCheckConnectionAsync(deviceid, null);
        }
        
        /// <remarks/>
        public void GetCheckConnectionAsync(string deviceid, object userState) {
            if ((this.GetCheckConnectionOperationCompleted == null)) {
                this.GetCheckConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckConnectionOperationCompleted);
            }
            this.InvokeAsync("GetCheckConnection", new object[] {
                        deviceid}, this.GetCheckConnectionOperationCompleted, userState);
        }
        
        private void OnGetCheckConnectionOperationCompleted(object arg) {
            if ((this.GetCheckConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckConnectionCompleted(this, new GetCheckConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHWInvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHWInvent(string deviceid, int commandno) {
            object[] results = this.Invoke("GetHWInvent", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHWInventAsync(string deviceid, int commandno) {
            this.GetHWInventAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetHWInventAsync(string deviceid, int commandno, object userState) {
            if ((this.GetHWInventOperationCompleted == null)) {
                this.GetHWInventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHWInventOperationCompleted);
            }
            this.InvokeAsync("GetHWInvent", new object[] {
                        deviceid,
                        commandno}, this.GetHWInventOperationCompleted, userState);
        }
        
        private void OnGetHWInventOperationCompleted(object arg) {
            if ((this.GetHWInventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHWInventCompleted(this, new GetHWInventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionProp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionProp(string deviceid, int commandno) {
            object[] results = this.Invoke("GetVersionProp", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionPropAsync(string deviceid, int commandno) {
            this.GetVersionPropAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetVersionPropAsync(string deviceid, int commandno, object userState) {
            if ((this.GetVersionPropOperationCompleted == null)) {
                this.GetVersionPropOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionPropOperationCompleted);
            }
            this.InvokeAsync("GetVersionProp", new object[] {
                        deviceid,
                        commandno}, this.GetVersionPropOperationCompleted, userState);
        }
        
        private void OnGetVersionPropOperationCompleted(object arg) {
            if ((this.GetVersionPropCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionPropCompleted(this, new GetVersionPropCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/KillProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string KillProcess(string deviceid, string name, int commandno) {
            object[] results = this.Invoke("KillProcess", new object[] {
                        deviceid,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void KillProcessAsync(string deviceid, string name, int commandno) {
            this.KillProcessAsync(deviceid, name, commandno, null);
        }
        
        /// <remarks/>
        public void KillProcessAsync(string deviceid, string name, int commandno, object userState) {
            if ((this.KillProcessOperationCompleted == null)) {
                this.KillProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKillProcessOperationCompleted);
            }
            this.InvokeAsync("KillProcess", new object[] {
                        deviceid,
                        name,
                        commandno}, this.KillProcessOperationCompleted, userState);
        }
        
        private void OnKillProcessOperationCompleted(object arg) {
            if ((this.KillProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KillProcessCompleted(this, new KillProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDirFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDirFiles(string deviceid, string path, int commandno) {
            object[] results = this.Invoke("GetDirFiles", new object[] {
                        deviceid,
                        path,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDirFilesAsync(string deviceid, string path, int commandno) {
            this.GetDirFilesAsync(deviceid, path, commandno, null);
        }
        
        /// <remarks/>
        public void GetDirFilesAsync(string deviceid, string path, int commandno, object userState) {
            if ((this.GetDirFilesOperationCompleted == null)) {
                this.GetDirFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirFilesOperationCompleted);
            }
            this.InvokeAsync("GetDirFiles", new object[] {
                        deviceid,
                        path,
                        commandno}, this.GetDirFilesOperationCompleted, userState);
        }
        
        private void OnGetDirFilesOperationCompleted(object arg) {
            if ((this.GetDirFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirFilesCompleted(this, new GetDirFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartProcess(string deviceid, string path, string name, int commandno) {
            object[] results = this.Invoke("StartProcess", new object[] {
                        deviceid,
                        path,
                        name,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartProcessAsync(string deviceid, string path, string name, int commandno) {
            this.StartProcessAsync(deviceid, path, name, commandno, null);
        }
        
        /// <remarks/>
        public void StartProcessAsync(string deviceid, string path, string name, int commandno, object userState) {
            if ((this.StartProcessOperationCompleted == null)) {
                this.StartProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartProcessOperationCompleted);
            }
            this.InvokeAsync("StartProcess", new object[] {
                        deviceid,
                        path,
                        name,
                        commandno}, this.StartProcessOperationCompleted, userState);
        }
        
        private void OnStartProcessOperationCompleted(object arg) {
            if ((this.StartProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartProcessCompleted(this, new StartProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDirectories", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDirectories(string deviceid, int commandno) {
            object[] results = this.Invoke("GetDirectories", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDirectoriesAsync(string deviceid, int commandno) {
            this.GetDirectoriesAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetDirectoriesAsync(string deviceid, int commandno, object userState) {
            if ((this.GetDirectoriesOperationCompleted == null)) {
                this.GetDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetDirectories", new object[] {
                        deviceid,
                        commandno}, this.GetDirectoriesOperationCompleted, userState);
        }
        
        private void OnGetDirectoriesOperationCompleted(object arg) {
            if ((this.GetDirectoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirectoriesCompleted(this, new GetDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServices(string deviceid, int commandno) {
            object[] results = this.Invoke("GetServices", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesAsync(string deviceid, int commandno) {
            this.GetServicesAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetServicesAsync(string deviceid, int commandno, object userState) {
            if ((this.GetServicesOperationCompleted == null)) {
                this.GetServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesOperationCompleted);
            }
            this.InvokeAsync("GetServices", new object[] {
                        deviceid,
                        commandno}, this.GetServicesOperationCompleted, userState);
        }
        
        private void OnGetServicesOperationCompleted(object arg) {
            if ((this.GetServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesCompleted(this, new GetServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProcesses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcesses(string deviceid, int commandno) {
            object[] results = this.Invoke("GetProcesses", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessesAsync(string deviceid, int commandno) {
            this.GetProcessesAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetProcessesAsync(string deviceid, int commandno, object userState) {
            if ((this.GetProcessesOperationCompleted == null)) {
                this.GetProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessesOperationCompleted);
            }
            this.InvokeAsync("GetProcesses", new object[] {
                        deviceid,
                        commandno}, this.GetProcessesOperationCompleted, userState);
        }
        
        private void OnGetProcessesOperationCompleted(object arg) {
            if ((this.GetProcessesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessesCompleted(this, new GetProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDateTime(string deviceid, int commandno) {
            object[] results = this.Invoke("GetDateTime", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDateTimeAsync(string deviceid, int commandno) {
            this.GetDateTimeAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetDateTimeAsync(string deviceid, int commandno, object userState) {
            if ((this.GetDateTimeOperationCompleted == null)) {
                this.GetDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDateTimeOperationCompleted);
            }
            this.InvokeAsync("GetDateTime", new object[] {
                        deviceid,
                        commandno}, this.GetDateTimeOperationCompleted, userState);
        }
        
        private void OnGetDateTimeOperationCompleted(object arg) {
            if ((this.GetDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDateTimeCompleted(this, new GetDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetWindowActivation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetWindowActivation(string deviceid, int commandno) {
            object[] results = this.Invoke("SetWindowActivation", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetWindowActivationAsync(string deviceid, int commandno) {
            this.SetWindowActivationAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void SetWindowActivationAsync(string deviceid, int commandno, object userState) {
            if ((this.SetWindowActivationOperationCompleted == null)) {
                this.SetWindowActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWindowActivationOperationCompleted);
            }
            this.InvokeAsync("SetWindowActivation", new object[] {
                        deviceid,
                        commandno}, this.SetWindowActivationOperationCompleted, userState);
        }
        
        private void OnSetWindowActivationOperationCompleted(object arg) {
            if ((this.SetWindowActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWindowActivationCompleted(this, new SetWindowActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RestartMachine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RestartMachine(string deviceid, int commandno, int timeout) {
            object[] results = this.Invoke("RestartMachine", new object[] {
                        deviceid,
                        commandno,
                        timeout});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RestartMachineAsync(string deviceid, int commandno, int timeout) {
            this.RestartMachineAsync(deviceid, commandno, timeout, null);
        }
        
        /// <remarks/>
        public void RestartMachineAsync(string deviceid, int commandno, int timeout, object userState) {
            if ((this.RestartMachineOperationCompleted == null)) {
                this.RestartMachineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestartMachineOperationCompleted);
            }
            this.InvokeAsync("RestartMachine", new object[] {
                        deviceid,
                        commandno,
                        timeout}, this.RestartMachineOperationCompleted, userState);
        }
        
        private void OnRestartMachineOperationCompleted(object arg) {
            if ((this.RestartMachineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestartMachineCompleted(this, new RestartMachineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteProgram", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteProgram(string deviceid, string filepath, int commandno, int timeout) {
            object[] results = this.Invoke("ExecuteProgram", new object[] {
                        deviceid,
                        filepath,
                        commandno,
                        timeout});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteProgramAsync(string deviceid, string filepath, int commandno, int timeout) {
            this.ExecuteProgramAsync(deviceid, filepath, commandno, timeout, null);
        }
        
        /// <remarks/>
        public void ExecuteProgramAsync(string deviceid, string filepath, int commandno, int timeout, object userState) {
            if ((this.ExecuteProgramOperationCompleted == null)) {
                this.ExecuteProgramOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteProgramOperationCompleted);
            }
            this.InvokeAsync("ExecuteProgram", new object[] {
                        deviceid,
                        filepath,
                        commandno,
                        timeout}, this.ExecuteProgramOperationCompleted, userState);
        }
        
        private void OnExecuteProgramOperationCompleted(object arg) {
            if ((this.ExecuteProgramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteProgramCompleted(this, new ExecuteProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Downloadfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Downloadfile(string deviceid, string filepath, string filename, int commandno, string UserID, System.DateTime TimeStamp) {
            object[] results = this.Invoke("Downloadfile", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        UserID,
                        TimeStamp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadfileAsync(string deviceid, string filepath, string filename, int commandno, string UserID, System.DateTime TimeStamp) {
            this.DownloadfileAsync(deviceid, filepath, filename, commandno, UserID, TimeStamp, null);
        }
        
        /// <remarks/>
        public void DownloadfileAsync(string deviceid, string filepath, string filename, int commandno, string UserID, System.DateTime TimeStamp, object userState) {
            if ((this.DownloadfileOperationCompleted == null)) {
                this.DownloadfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadfileOperationCompleted);
            }
            this.InvokeAsync("Downloadfile", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        UserID,
                        TimeStamp}, this.DownloadfileOperationCompleted, userState);
        }
        
        private void OnDownloadfileOperationCompleted(object arg) {
            if ((this.DownloadfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadfileCompleted(this, new DownloadfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadSecondAgentfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadSecondAgentfile(string deviceid, string filepath, string filename, int commandno, string UserID, System.DateTime TimeStamp) {
            object[] results = this.Invoke("DownloadSecondAgentfile", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        UserID,
                        TimeStamp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadSecondAgentfileAsync(string deviceid, string filepath, string filename, int commandno, string UserID, System.DateTime TimeStamp) {
            this.DownloadSecondAgentfileAsync(deviceid, filepath, filename, commandno, UserID, TimeStamp, null);
        }
        
        /// <remarks/>
        public void DownloadSecondAgentfileAsync(string deviceid, string filepath, string filename, int commandno, string UserID, System.DateTime TimeStamp, object userState) {
            if ((this.DownloadSecondAgentfileOperationCompleted == null)) {
                this.DownloadSecondAgentfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadSecondAgentfileOperationCompleted);
            }
            this.InvokeAsync("DownloadSecondAgentfile", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        UserID,
                        TimeStamp}, this.DownloadSecondAgentfileOperationCompleted, userState);
        }
        
        private void OnDownloadSecondAgentfileOperationCompleted(object arg) {
            if ((this.DownloadSecondAgentfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadSecondAgentfileCompleted(this, new DownloadSecondAgentfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadScreenfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadScreenfile(string deviceid, int commandno) {
            object[] results = this.Invoke("DownloadScreenfile", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadScreenfileAsync(string deviceid, int commandno) {
            this.DownloadScreenfileAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void DownloadScreenfileAsync(string deviceid, int commandno, object userState) {
            if ((this.DownloadScreenfileOperationCompleted == null)) {
                this.DownloadScreenfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadScreenfileOperationCompleted);
            }
            this.InvokeAsync("DownloadScreenfile", new object[] {
                        deviceid,
                        commandno}, this.DownloadScreenfileOperationCompleted, userState);
        }
        
        private void OnDownloadScreenfileOperationCompleted(object arg) {
            if ((this.DownloadScreenfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadScreenfileCompleted(this, new DownloadScreenfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadJournalfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadJournalfile(string deviceid, string filepath, int commandno) {
            object[] results = this.Invoke("DownloadJournalfile", new object[] {
                        deviceid,
                        filepath,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadJournalfileAsync(string deviceid, string filepath, int commandno) {
            this.DownloadJournalfileAsync(deviceid, filepath, commandno, null);
        }
        
        /// <remarks/>
        public void DownloadJournalfileAsync(string deviceid, string filepath, int commandno, object userState) {
            if ((this.DownloadJournalfileOperationCompleted == null)) {
                this.DownloadJournalfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadJournalfileOperationCompleted);
            }
            this.InvokeAsync("DownloadJournalfile", new object[] {
                        deviceid,
                        filepath,
                        commandno}, this.DownloadJournalfileOperationCompleted, userState);
        }
        
        private void OnDownloadJournalfileOperationCompleted(object arg) {
            if ((this.DownloadJournalfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadJournalfileCompleted(this, new DownloadJournalfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSystemInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSystemInfo(string deviceid, int commandno) {
            object[] results = this.Invoke("GetSystemInfo", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemInfoAsync(string deviceid, int commandno) {
            this.GetSystemInfoAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetSystemInfoAsync(string deviceid, int commandno, object userState) {
            if ((this.GetSystemInfoOperationCompleted == null)) {
                this.GetSystemInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemInfoOperationCompleted);
            }
            this.InvokeAsync("GetSystemInfo", new object[] {
                        deviceid,
                        commandno}, this.GetSystemInfoOperationCompleted, userState);
        }
        
        private void OnGetSystemInfoOperationCompleted(object arg) {
            if ((this.GetSystemInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemInfoCompleted(this, new GetSystemInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBIOSUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetBIOSUpdate(string deviceid, int commandno, string version) {
            object[] results = this.Invoke("SetBIOSUpdate", new object[] {
                        deviceid,
                        commandno,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetBIOSUpdateAsync(string deviceid, int commandno, string version) {
            this.SetBIOSUpdateAsync(deviceid, commandno, version, null);
        }
        
        /// <remarks/>
        public void SetBIOSUpdateAsync(string deviceid, int commandno, string version, object userState) {
            if ((this.SetBIOSUpdateOperationCompleted == null)) {
                this.SetBIOSUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBIOSUpdateOperationCompleted);
            }
            this.InvokeAsync("SetBIOSUpdate", new object[] {
                        deviceid,
                        commandno,
                        version}, this.SetBIOSUpdateOperationCompleted, userState);
        }
        
        private void OnSetBIOSUpdateOperationCompleted(object arg) {
            if ((this.SetBIOSUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBIOSUpdateCompleted(this, new SetBIOSUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BIOSInstallDriver", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BIOSInstallDriver(string deviceid, int commandno) {
            object[] results = this.Invoke("BIOSInstallDriver", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BIOSInstallDriverAsync(string deviceid, int commandno) {
            this.BIOSInstallDriverAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void BIOSInstallDriverAsync(string deviceid, int commandno, object userState) {
            if ((this.BIOSInstallDriverOperationCompleted == null)) {
                this.BIOSInstallDriverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBIOSInstallDriverOperationCompleted);
            }
            this.InvokeAsync("BIOSInstallDriver", new object[] {
                        deviceid,
                        commandno}, this.BIOSInstallDriverOperationCompleted, userState);
        }
        
        private void OnBIOSInstallDriverOperationCompleted(object arg) {
            if ((this.BIOSInstallDriverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BIOSInstallDriverCompleted(this, new BIOSInstallDriverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBIOSPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetBIOSPassword(string deviceid, int commandno, string passwordcommand, string oldpassword, string newpassword) {
            object[] results = this.Invoke("SetBIOSPassword", new object[] {
                        deviceid,
                        commandno,
                        passwordcommand,
                        oldpassword,
                        newpassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetBIOSPasswordAsync(string deviceid, int commandno, string passwordcommand, string oldpassword, string newpassword) {
            this.SetBIOSPasswordAsync(deviceid, commandno, passwordcommand, oldpassword, newpassword, null);
        }
        
        /// <remarks/>
        public void SetBIOSPasswordAsync(string deviceid, int commandno, string passwordcommand, string oldpassword, string newpassword, object userState) {
            if ((this.SetBIOSPasswordOperationCompleted == null)) {
                this.SetBIOSPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBIOSPasswordOperationCompleted);
            }
            this.InvokeAsync("SetBIOSPassword", new object[] {
                        deviceid,
                        commandno,
                        passwordcommand,
                        oldpassword,
                        newpassword}, this.SetBIOSPasswordOperationCompleted, userState);
        }
        
        private void OnSetBIOSPasswordOperationCompleted(object arg) {
            if ((this.SetBIOSPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBIOSPasswordCompleted(this, new SetBIOSPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadIMSDiagfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadIMSDiagfile(string deviceid, int commandno) {
            object[] results = this.Invoke("DownloadIMSDiagfile", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadIMSDiagfileAsync(string deviceid, int commandno) {
            this.DownloadIMSDiagfileAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void DownloadIMSDiagfileAsync(string deviceid, int commandno, object userState) {
            if ((this.DownloadIMSDiagfileOperationCompleted == null)) {
                this.DownloadIMSDiagfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadIMSDiagfileOperationCompleted);
            }
            this.InvokeAsync("DownloadIMSDiagfile", new object[] {
                        deviceid,
                        commandno}, this.DownloadIMSDiagfileOperationCompleted, userState);
        }
        
        private void OnDownloadIMSDiagfileOperationCompleted(object arg) {
            if ((this.DownloadIMSDiagfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadIMSDiagfileCompleted(this, new DownloadIMSDiagfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadIMSInventfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadIMSInventfile(string deviceid, int commandno) {
            object[] results = this.Invoke("DownloadIMSInventfile", new object[] {
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadIMSInventfileAsync(string deviceid, int commandno) {
            this.DownloadIMSInventfileAsync(deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void DownloadIMSInventfileAsync(string deviceid, int commandno, object userState) {
            if ((this.DownloadIMSInventfileOperationCompleted == null)) {
                this.DownloadIMSInventfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadIMSInventfileOperationCompleted);
            }
            this.InvokeAsync("DownloadIMSInventfile", new object[] {
                        deviceid,
                        commandno}, this.DownloadIMSInventfileOperationCompleted, userState);
        }
        
        private void OnDownloadIMSInventfileOperationCompleted(object arg) {
            if ((this.DownloadIMSInventfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadIMSInventfileCompleted(this, new DownloadIMSInventfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Uploadfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Uploadfile(string deviceid, string filepath, string filename, int commandno, string filedata, string overrite, string UserID, System.DateTime TimeStamp) {
            object[] results = this.Invoke("Uploadfile", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        filedata,
                        overrite,
                        UserID,
                        TimeStamp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadfileAsync(string deviceid, string filepath, string filename, int commandno, string filedata, string overrite, string UserID, System.DateTime TimeStamp) {
            this.UploadfileAsync(deviceid, filepath, filename, commandno, filedata, overrite, UserID, TimeStamp, null);
        }
        
        /// <remarks/>
        public void UploadfileAsync(string deviceid, string filepath, string filename, int commandno, string filedata, string overrite, string UserID, System.DateTime TimeStamp, object userState) {
            if ((this.UploadfileOperationCompleted == null)) {
                this.UploadfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadfileOperationCompleted);
            }
            this.InvokeAsync("Uploadfile", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        filedata,
                        overrite,
                        UserID,
                        TimeStamp}, this.UploadfileOperationCompleted, userState);
        }
        
        private void OnUploadfileOperationCompleted(object arg) {
            if ((this.UploadfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadfileCompleted(this, new UploadfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadSecondAgentUpdater", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadSecondAgentUpdater(string deviceid, string filepath, string filename, int commandno, string filedata, string overrite, string UserID, System.DateTime TimeStamp) {
            object[] results = this.Invoke("UploadSecondAgentUpdater", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        filedata,
                        overrite,
                        UserID,
                        TimeStamp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSecondAgentUpdaterAsync(string deviceid, string filepath, string filename, int commandno, string filedata, string overrite, string UserID, System.DateTime TimeStamp) {
            this.UploadSecondAgentUpdaterAsync(deviceid, filepath, filename, commandno, filedata, overrite, UserID, TimeStamp, null);
        }
        
        /// <remarks/>
        public void UploadSecondAgentUpdaterAsync(string deviceid, string filepath, string filename, int commandno, string filedata, string overrite, string UserID, System.DateTime TimeStamp, object userState) {
            if ((this.UploadSecondAgentUpdaterOperationCompleted == null)) {
                this.UploadSecondAgentUpdaterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSecondAgentUpdaterOperationCompleted);
            }
            this.InvokeAsync("UploadSecondAgentUpdater", new object[] {
                        deviceid,
                        filepath,
                        filename,
                        commandno,
                        filedata,
                        overrite,
                        UserID,
                        TimeStamp}, this.UploadSecondAgentUpdaterOperationCompleted, userState);
        }
        
        private void OnUploadSecondAgentUpdaterOperationCompleted(object arg) {
            if ((this.UploadSecondAgentUpdaterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSecondAgentUpdaterCompleted(this, new UploadSecondAgentUpdaterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBootSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBootSettings(string ip, string username, string password, string deviceid, string machinetype, int commandno) {
            object[] results = this.Invoke("GetBootSettings", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        machinetype,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBootSettingsAsync(string ip, string username, string password, string deviceid, string machinetype, int commandno) {
            this.GetBootSettingsAsync(ip, username, password, deviceid, machinetype, commandno, null);
        }
        
        /// <remarks/>
        public void GetBootSettingsAsync(string ip, string username, string password, string deviceid, string machinetype, int commandno, object userState) {
            if ((this.GetBootSettingsOperationCompleted == null)) {
                this.GetBootSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBootSettingsOperationCompleted);
            }
            this.InvokeAsync("GetBootSettings", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        machinetype,
                        commandno}, this.GetBootSettingsOperationCompleted, userState);
        }
        
        private void OnGetBootSettingsOperationCompleted(object arg) {
            if ((this.GetBootSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBootSettingsCompleted(this, new GetBootSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBootCapabilities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBootCapabilities(string ip, string username, string password, string deviceid, string machinetype, int commandno) {
            object[] results = this.Invoke("GetBootCapabilities", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        machinetype,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBootCapabilitiesAsync(string ip, string username, string password, string deviceid, string machinetype, int commandno) {
            this.GetBootCapabilitiesAsync(ip, username, password, deviceid, machinetype, commandno, null);
        }
        
        /// <remarks/>
        public void GetBootCapabilitiesAsync(string ip, string username, string password, string deviceid, string machinetype, int commandno, object userState) {
            if ((this.GetBootCapabilitiesOperationCompleted == null)) {
                this.GetBootCapabilitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBootCapabilitiesOperationCompleted);
            }
            this.InvokeAsync("GetBootCapabilities", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        machinetype,
                        commandno}, this.GetBootCapabilitiesOperationCompleted, userState);
        }
        
        private void OnGetBootCapabilitiesOperationCompleted(object arg) {
            if ((this.GetBootCapabilitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBootCapabilitiesCompleted(this, new GetBootCapabilitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetNextBootFromCDDVD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetNextBootFromCDDVD(string ip, string username, string password, string deviceid, string mediadevicetype, string biospassword, int commandno) {
            object[] results = this.Invoke("SetNextBootFromCDDVD", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        mediadevicetype,
                        biospassword,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetNextBootFromCDDVDAsync(string ip, string username, string password, string deviceid, string mediadevicetype, string biospassword, int commandno) {
            this.SetNextBootFromCDDVDAsync(ip, username, password, deviceid, mediadevicetype, biospassword, commandno, null);
        }
        
        /// <remarks/>
        public void SetNextBootFromCDDVDAsync(string ip, string username, string password, string deviceid, string mediadevicetype, string biospassword, int commandno, object userState) {
            if ((this.SetNextBootFromCDDVDOperationCompleted == null)) {
                this.SetNextBootFromCDDVDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetNextBootFromCDDVDOperationCompleted);
            }
            this.InvokeAsync("SetNextBootFromCDDVD", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        mediadevicetype,
                        biospassword,
                        commandno}, this.SetNextBootFromCDDVDOperationCompleted, userState);
        }
        
        private void OnSetNextBootFromCDDVDOperationCompleted(object arg) {
            if ((this.SetNextBootFromCDDVDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetNextBootFromCDDVDCompleted(this, new SetNextBootFromCDDVDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetNextBootFromCapablities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetNextBootFromCapablities(string ip, string username, string password, string deviceid, string mediadevicetype, string biospassword, int commandno) {
            object[] results = this.Invoke("SetNextBootFromCapablities", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        mediadevicetype,
                        biospassword,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetNextBootFromCapablitiesAsync(string ip, string username, string password, string deviceid, string mediadevicetype, string biospassword, int commandno) {
            this.SetNextBootFromCapablitiesAsync(ip, username, password, deviceid, mediadevicetype, biospassword, commandno, null);
        }
        
        /// <remarks/>
        public void SetNextBootFromCapablitiesAsync(string ip, string username, string password, string deviceid, string mediadevicetype, string biospassword, int commandno, object userState) {
            if ((this.SetNextBootFromCapablitiesOperationCompleted == null)) {
                this.SetNextBootFromCapablitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetNextBootFromCapablitiesOperationCompleted);
            }
            this.InvokeAsync("SetNextBootFromCapablities", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        mediadevicetype,
                        biospassword,
                        commandno}, this.SetNextBootFromCapablitiesOperationCompleted, userState);
        }
        
        private void OnSetNextBootFromCapablitiesOperationCompleted(object arg) {
            if ((this.SetNextBootFromCapablitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetNextBootFromCapablitiesCompleted(this, new SetNextBootFromCapablitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetNextBootFromSource", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetNextBootFromSource(string ip, string username, string password, string deviceid, string source, string mediadevicetype, string biospassword, int commandno) {
            object[] results = this.Invoke("SetNextBootFromSource", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        source,
                        mediadevicetype,
                        biospassword,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetNextBootFromSourceAsync(string ip, string username, string password, string deviceid, string source, string mediadevicetype, string biospassword, int commandno) {
            this.SetNextBootFromSourceAsync(ip, username, password, deviceid, source, mediadevicetype, biospassword, commandno, null);
        }
        
        /// <remarks/>
        public void SetNextBootFromSourceAsync(string ip, string username, string password, string deviceid, string source, string mediadevicetype, string biospassword, int commandno, object userState) {
            if ((this.SetNextBootFromSourceOperationCompleted == null)) {
                this.SetNextBootFromSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetNextBootFromSourceOperationCompleted);
            }
            this.InvokeAsync("SetNextBootFromSource", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        source,
                        mediadevicetype,
                        biospassword,
                        commandno}, this.SetNextBootFromSourceOperationCompleted, userState);
        }
        
        private void OnSetNextBootFromSourceOperationCompleted(object arg) {
            if ((this.SetNextBootFromSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetNextBootFromSourceCompleted(this, new SetNextBootFromSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRSEPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetRSEPassword(string ip, string username, string password, string setpassword, int commandno) {
            object[] results = this.Invoke("SetRSEPassword", new object[] {
                        ip,
                        username,
                        password,
                        setpassword,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetRSEPasswordAsync(string ip, string username, string password, string setpassword, int commandno) {
            this.SetRSEPasswordAsync(ip, username, password, setpassword, commandno, null);
        }
        
        /// <remarks/>
        public void SetRSEPasswordAsync(string ip, string username, string password, string setpassword, int commandno, object userState) {
            if ((this.SetRSEPasswordOperationCompleted == null)) {
                this.SetRSEPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRSEPasswordOperationCompleted);
            }
            this.InvokeAsync("SetRSEPassword", new object[] {
                        ip,
                        username,
                        password,
                        setpassword,
                        commandno}, this.SetRSEPasswordOperationCompleted, userState);
        }
        
        private void OnSetRSEPasswordOperationCompleted(object arg) {
            if ((this.SetRSEPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRSEPasswordCompleted(this, new SetRSEPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBiosLastStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBiosLastStatus(string ip, string username, string password, string deviceid, int commandno) {
            object[] results = this.Invoke("GetBiosLastStatus", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBiosLastStatusAsync(string ip, string username, string password, string deviceid, int commandno) {
            this.GetBiosLastStatusAsync(ip, username, password, deviceid, commandno, null);
        }
        
        /// <remarks/>
        public void GetBiosLastStatusAsync(string ip, string username, string password, string deviceid, int commandno, object userState) {
            if ((this.GetBiosLastStatusOperationCompleted == null)) {
                this.GetBiosLastStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBiosLastStatusOperationCompleted);
            }
            this.InvokeAsync("GetBiosLastStatus", new object[] {
                        ip,
                        username,
                        password,
                        deviceid,
                        commandno}, this.GetBiosLastStatusOperationCompleted, userState);
        }
        
        private void OnGetBiosLastStatusOperationCompleted(object arg) {
            if ((this.GetBiosLastStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBiosLastStatusCompleted(this, new GetBiosLastStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearBootOptions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ClearBootOptions(string ip, string username, string password, int commandno) {
            object[] results = this.Invoke("ClearBootOptions", new object[] {
                        ip,
                        username,
                        password,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ClearBootOptionsAsync(string ip, string username, string password, int commandno) {
            this.ClearBootOptionsAsync(ip, username, password, commandno, null);
        }
        
        /// <remarks/>
        public void ClearBootOptionsAsync(string ip, string username, string password, int commandno, object userState) {
            if ((this.ClearBootOptionsOperationCompleted == null)) {
                this.ClearBootOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearBootOptionsOperationCompleted);
            }
            this.InvokeAsync("ClearBootOptions", new object[] {
                        ip,
                        username,
                        password,
                        commandno}, this.ClearBootOptionsOperationCompleted, userState);
        }
        
        private void OnClearBootOptionsOperationCompleted(object arg) {
            if ((this.ClearBootOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearBootOptionsCompleted(this, new ClearBootOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAMTVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAMTVersion(string ip, string username, string password, int commandno) {
            object[] results = this.Invoke("GetAMTVersion", new object[] {
                        ip,
                        username,
                        password,
                        commandno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAMTVersionAsync(string ip, string username, string password, int commandno) {
            this.GetAMTVersionAsync(ip, username, password, commandno, null);
        }
        
        /// <remarks/>
        public void GetAMTVersionAsync(string ip, string username, string password, int commandno, object userState) {
            if ((this.GetAMTVersionOperationCompleted == null)) {
                this.GetAMTVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMTVersionOperationCompleted);
            }
            this.InvokeAsync("GetAMTVersion", new object[] {
                        ip,
                        username,
                        password,
                        commandno}, this.GetAMTVersionOperationCompleted, userState);
        }
        
        private void OnGetAMTVersionOperationCompleted(object arg) {
            if ((this.GetAMTVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMTVersionCompleted(this, new GetAMTVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SecondAgentPauseServiceCompletedEventHandler(object sender, SecondAgentPauseServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecondAgentPauseServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecondAgentPauseServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SecondAgentRestartServiceCompletedEventHandler(object sender, SecondAgentRestartServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecondAgentRestartServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecondAgentRestartServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SecondAgentStopServiceCompletedEventHandler(object sender, SecondAgentStopServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecondAgentStopServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecondAgentStopServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SecondAgentStartServiceCompletedEventHandler(object sender, SecondAgentStartServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecondAgentStartServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecondAgentStartServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SecondAgentKillProcessCompletedEventHandler(object sender, SecondAgentKillProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecondAgentKillProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecondAgentKillProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SecondAgentRestartMachineCompletedEventHandler(object sender, SecondAgentRestartMachineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecondAgentRestartMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecondAgentRestartMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetServicesSecondCompletedEventHandler(object sender, GetServicesSecondCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesSecondCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesSecondCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProcessesSecondCompletedEventHandler(object sender, GetProcessesSecondCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessesSecondCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessesSecondCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SecondAgentServiceControlCompletedEventHandler(object sender, SecondAgentServiceControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecondAgentServiceControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecondAgentServiceControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecutereportCompletedEventHandler(object sender, ExecutereportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecutereportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecutereportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PauseServiceCompletedEventHandler(object sender, PauseServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PauseServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PauseServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RestartServiceCompletedEventHandler(object sender, RestartServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RestartServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RestartServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StopServiceCompletedEventHandler(object sender, StopServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetDateCompletedEventHandler(object sender, SetDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMachineTypeCompletedEventHandler(object sender, GetMachineTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMachineTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMachineTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreateIMSDiagCompletedEventHandler(object sender, CreateIMSDiagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIMSDiagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIMSDiagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreateIMSInventCompletedEventHandler(object sender, CreateIMSInventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIMSInventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIMSInventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetTimeCompletedEventHandler(object sender, SetTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StartServiceCompletedEventHandler(object sender, StartServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDeviceManagerInfoCompletedEventHandler(object sender, GetDeviceManagerInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceManagerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceManagerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCPUInfoCompletedEventHandler(object sender, GetCPUInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCPUInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCPUInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLANInfoCompletedEventHandler(object sender, GetLANInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLANInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLANInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOSInfoCompletedEventHandler(object sender, GetOSInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOSInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOSInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDiskDriveInfoCompletedEventHandler(object sender, GetDiskDriveInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiskDriveInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiskDriveInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPhysicalMemoryCompletedEventHandler(object sender, GetPhysicalMemoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPhysicalMemoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPhysicalMemoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCheckConnectionCompletedEventHandler(object sender, GetCheckConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetHWInventCompletedEventHandler(object sender, GetHWInventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHWInventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHWInventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetVersionPropCompletedEventHandler(object sender, GetVersionPropCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionPropCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionPropCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void KillProcessCompletedEventHandler(object sender, KillProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KillProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KillProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDirFilesCompletedEventHandler(object sender, GetDirFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDirFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StartProcessCompletedEventHandler(object sender, StartProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDirectoriesCompletedEventHandler(object sender, GetDirectoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetServicesCompletedEventHandler(object sender, GetServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProcessesCompletedEventHandler(object sender, GetProcessesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDateTimeCompletedEventHandler(object sender, GetDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetWindowActivationCompletedEventHandler(object sender, SetWindowActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWindowActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWindowActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RestartMachineCompletedEventHandler(object sender, RestartMachineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RestartMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RestartMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecuteProgramCompletedEventHandler(object sender, ExecuteProgramCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DownloadfileCompletedEventHandler(object sender, DownloadfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DownloadSecondAgentfileCompletedEventHandler(object sender, DownloadSecondAgentfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadSecondAgentfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadSecondAgentfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DownloadScreenfileCompletedEventHandler(object sender, DownloadScreenfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadScreenfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadScreenfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DownloadJournalfileCompletedEventHandler(object sender, DownloadJournalfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadJournalfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadJournalfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSystemInfoCompletedEventHandler(object sender, GetSystemInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetBIOSUpdateCompletedEventHandler(object sender, SetBIOSUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBIOSUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBIOSUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BIOSInstallDriverCompletedEventHandler(object sender, BIOSInstallDriverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BIOSInstallDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BIOSInstallDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetBIOSPasswordCompletedEventHandler(object sender, SetBIOSPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBIOSPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBIOSPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DownloadIMSDiagfileCompletedEventHandler(object sender, DownloadIMSDiagfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadIMSDiagfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadIMSDiagfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DownloadIMSInventfileCompletedEventHandler(object sender, DownloadIMSInventfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadIMSInventfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadIMSInventfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadfileCompletedEventHandler(object sender, UploadfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadSecondAgentUpdaterCompletedEventHandler(object sender, UploadSecondAgentUpdaterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSecondAgentUpdaterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSecondAgentUpdaterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetBootSettingsCompletedEventHandler(object sender, GetBootSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBootSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBootSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetBootCapabilitiesCompletedEventHandler(object sender, GetBootCapabilitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBootCapabilitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBootCapabilitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetNextBootFromCDDVDCompletedEventHandler(object sender, SetNextBootFromCDDVDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetNextBootFromCDDVDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetNextBootFromCDDVDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetNextBootFromCapablitiesCompletedEventHandler(object sender, SetNextBootFromCapablitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetNextBootFromCapablitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetNextBootFromCapablitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetNextBootFromSourceCompletedEventHandler(object sender, SetNextBootFromSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetNextBootFromSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetNextBootFromSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetRSEPasswordCompletedEventHandler(object sender, SetRSEPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRSEPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRSEPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetBiosLastStatusCompletedEventHandler(object sender, GetBiosLastStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBiosLastStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBiosLastStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ClearBootOptionsCompletedEventHandler(object sender, ClearBootOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearBootOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearBootOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAMTVersionCompletedEventHandler(object sender, GetAMTVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMTVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMTVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591