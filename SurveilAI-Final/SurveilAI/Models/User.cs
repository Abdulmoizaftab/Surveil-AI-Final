//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SurveilAI.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.ComponentModel.DataAnnotations;
    using System.Net.Http;
    using System.Security.Cryptography;
    using System.Text;
    using System.Web.Mvc;

    public partial class User
    {
        [Remote("AlreadyRegistered", "User", HttpMethod = "POST", ErrorMessage = "UserID already exists in database.", AdditionalFields = "initialUser")]
        [Required(ErrorMessage = "Username Required")]
        [MaxLength(30)]
        public string UserID { get; set; }

        [Required(ErrorMessage = "First Name Required")]
        [MaxLength(30)]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last Name Required")]
        [MaxLength(30)]
        public string LastName { get; set; }

        public string UserIDE { get; set; }

        [MaxLength(30)]
        [Required(ErrorMessage = "Password Required")]
        public string Password { get; set; }


        [Required(ErrorMessage = "Please Select Any Account Type")]
        public string AccountType { get; set; }

        public Nullable<System.DateTime> LastLogin { get; set; }
        public Nullable<bool> IsOnline { get; set; }
        public Nullable<System.DateTime> LastDateChange { get; set; }
        public Nullable<bool> PassUDPrompt { get; set; }
        public Nullable<bool> IsLocked { get; set; }
        public string Attempts { get; set; }
        public string Pass1 { get; set; }
        public string Pass2 { get; set; }
        public Nullable<bool> Ldap { get; set; }
        public string Pass3 { get; set; }
        public string Pass4 { get; set; }
        public string Pass5 { get; set; }

        [Required(ErrorMessage = "ATM ID Required")]
        public string ATM { get; set; }

        public Nullable<System.DateTime> LastActivity { get; set; }

        [NotMapped]
        public string idOld { get; set; }

        [NotMapped]
        [Required(ErrorMessage = "This Field is required")]
        public string newPassword { get; set; }
        [NotMapped]
        [Required(ErrorMessage = "This Field is required")]
        //[Remote("PasswordPolicyCheck", "User", AdditionalFields = "AccountType", HttpMethod = "POST", ErrorMessage = "Password does not meet password policy")]
        //[StringLength(18, ErrorMessage = "The new Password must be at least {2} characters long.", MinimumLength = 8)]
        //[RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[~!@#$%^&*()_+\-=?\/<>,.';:\[\]\{\}\\]).{8,18}$", ErrorMessage = "The new password must contain atleast one capital and small alphabets, digit, special character and should be atleast 8 characters long.")]               
        public string newPassword2 { get; set; }
        public string LastUrl { get; set; }
        public string LastUserLogged { get; set; }

        public List<Tuple<String, String, bool?, bool?, bool?, bool?>> UserData = new List<Tuple<string, string, bool?, bool?, bool?, bool?>>();

        public IEnumerable<Device> Devicess { get; set; }
        public IEnumerable<DeviceLastImage> lastimage { get; set; }
        public IEnumerable<V_LastImage> lastimagedetails { get; set; }
        public IEnumerable<User> users { get; set; }

        public string PasswordE { get; set; }
        public string newPasswordE { get; set; }
        public string newPassword2E { get; set; }

        //public List<ImageCustom> Data = new List<ImageCustom>();

        public List<String> atmss = new List<string>();



        public RijndaelManaged GetRijndaelManaged(String secretKey)
        {
            var keyBytes = new byte[16];
            var secretKeyBytes = Encoding.UTF8.GetBytes(secretKey);
            Array.Copy(secretKeyBytes, keyBytes, Math.Min(keyBytes.Length, secretKeyBytes.Length));
            return new RijndaelManaged
            {
                Mode = CipherMode.CBC,
                Padding = PaddingMode.PKCS7,
                KeySize = 128,
                BlockSize = 128,
                Key = keyBytes,
                IV = keyBytes
            };
        }

        public byte[] Encrypt(byte[] plainBytes, RijndaelManaged rijndaelManaged)
        {
            return rijndaelManaged.CreateEncryptor()
                .TransformFinalBlock(plainBytes, 0, plainBytes.Length);
        }

        public byte[] Decrypt(byte[] encryptedData, RijndaelManaged rijndaelManaged)
        {
            return rijndaelManaged.CreateDecryptor()
                .TransformFinalBlock(encryptedData, 0, encryptedData.Length);
        }

        public String Encrypt(String plainText, String key)
        {
            var plainBytes = Encoding.UTF8.GetBytes(plainText);
            return Convert.ToBase64String(Encrypt(plainBytes, GetRijndaelManaged(key)));
        }

        public String Decrypt(String encryptedText, String key)
        {
            var encryptedBytes = Convert.FromBase64String(encryptedText);
            return Encoding.UTF8.GetString(Decrypt(encryptedBytes, GetRijndaelManaged(key)));
        }

        public String Enc(String passwd)
        {
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(passwd);
            SHA1 sha = new SHA1CryptoServiceProvider();
            byte[] passbyte = sha.ComputeHash(bytes);
            string pass = Convert.ToBase64String(passbyte);

            return pass;
        }

        public void updLastAct(String user)
        {
            using (SurveilAIEntities db = new SurveilAIEntities())
            {
                db.Database.ExecuteSqlCommand("Update Users set LastActivity = '" + DateTime.Now + "' where  UserID = '" + user + "'");
            }
        }

        public string HashIt(string pwd)
        {
            var sha = new SHA1CryptoServiceProvider();
            var b64 = Encoding.ASCII.GetBytes(pwd);
            var result = sha.ComputeHash(b64);
            return Convert.ToBase64String(result);
        }

        public static string ByteArrayToString(byte[] ba)
        {
            StringBuilder hex = new StringBuilder(ba.Length * 2);
            foreach (byte b in ba)
            {
                hex.AppendFormat("{0:x2}", b);
            }
            return hex.ToString().ToLower();
        }
    }
}
